// Generated by @wagmi/cli@1.3.0 on 7/16/2023 at 12:34:18 AM
import {
  UseContractEventConfig,
  UseContractReadConfig,
  UsePrepareContractWriteConfig,
  useContractEvent,
  useContractRead,
  usePrepareContractWrite,
} from "wagmi";
import { ReadContractResult } from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gmx
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const gmxABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_manager", internalType: "address", type: "address" },
      { name: "_router", internalType: "address", type: "address" },
      { name: "_routerV2", internalType: "address", type: "address" },
      { name: "_deadline", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "AboveRiskThreshold" },
  { type: "error", inputs: [], name: "InvalidStatus" },
  { type: "error", inputs: [], name: "InvalidToken" },
  { type: "error", inputs: [], name: "Locked" },
  { type: "error", inputs: [], name: "LossByArbitraryAddress" },
  { type: "error", inputs: [], name: "MarginTooLow" },
  { type: "error", inputs: [], name: "RestrictedAccess" },
  { type: "error", inputs: [], name: "RestrictedToOwner" },
  { type: "error", inputs: [], name: "UserIsNotWhitelisted" },
  { type: "error", inputs: [], name: "ZeroGlpSupply" },
  { type: "error", inputs: [], name: "ZeroMarginLoan" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "approved",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "newValue",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "BaseRiskSpreadWasUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newGuardian",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "GuardianWasUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "liquidator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "payoff",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "LiquidationTriggered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "status", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LockWasToggled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "agreement",
        internalType: "struct IService.Agreement",
        type: "tuple",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
        indexed: false,
      },
    ],
    name: "PositionClosed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "agreement",
        internalType: "struct IService.Agreement",
        type: "tuple",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
        indexed: false,
      },
    ],
    name: "PositionOpened",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "Transfer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [],
    name: "WhitelistAccessFlagWasToggled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      { name: "status", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "WhitelistedStatusWasChanged",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "users", internalType: "address[]", type: "address[]" }],
    name: "addToWhitelist",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "agreements",
    outputs: [
      { name: "createdAt", internalType: "uint256", type: "uint256" },
      { name: "status", internalType: "enum IService.Status", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "baseRisks",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "close",
    outputs: [
      { name: "amountsOut", internalType: "uint256[]", type: "uint256[]" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "agreement",
        internalType: "struct IService.Agreement",
        type: "tuple",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
      },
    ],
    name: "computeDueFees",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "deadline",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      {
        name: "agreement",
        internalType: "struct IService.Agreement",
        type: "tuple",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
      },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "edit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "enabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenID", internalType: "uint256", type: "uint256" }],
    name: "getAgreement",
    outputs: [
      {
        name: "",
        internalType: "struct IService.Loan[]",
        type: "tuple[]",
        components: [
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "margin", internalType: "uint256", type: "uint256" },
          {
            name: "interestAndSpread",
            internalType: "uint256",
            type: "uint256",
          },
        ],
      },
      {
        name: "",
        internalType: "struct IService.Collateral[]",
        type: "tuple[]",
        components: [
          {
            name: "itemType",
            internalType: "enum IService.ItemType",
            type: "uint8",
          },
          { name: "token", internalType: "address", type: "address" },
          { name: "identifier", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "enum IService.Status", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getUserAgreements",
    outputs: [
      {
        name: "",
        internalType: "struct IService.Agreement[]",
        type: "tuple[]",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
      },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "glp",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "glpManager",
    outputs: [
      { name: "", internalType: "contract IGlpManager", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "guardian",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "id",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "uint256", type: "uint256" }],
    name: "liquidationScore",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "locked",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "manager",
    outputs: [{ name: "", internalType: "contract IManager", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "minMargin",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "order",
        internalType: "struct IService.Order",
        type: "tuple",
        components: [
          {
            name: "agreement",
            internalType: "struct IService.Agreement",
            type: "tuple",
            components: [
              {
                name: "loans",
                internalType: "struct IService.Loan[]",
                type: "tuple[]",
                components: [
                  { name: "token", internalType: "address", type: "address" },
                  { name: "amount", internalType: "uint256", type: "uint256" },
                  { name: "margin", internalType: "uint256", type: "uint256" },
                  {
                    name: "interestAndSpread",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
              {
                name: "collaterals",
                internalType: "struct IService.Collateral[]",
                type: "tuple[]",
                components: [
                  {
                    name: "itemType",
                    internalType: "enum IService.ItemType",
                    type: "uint8",
                  },
                  { name: "token", internalType: "address", type: "address" },
                  {
                    name: "identifier",
                    internalType: "uint256",
                    type: "uint256",
                  },
                  { name: "amount", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "createdAt", internalType: "uint256", type: "uint256" },
              {
                name: "status",
                internalType: "enum IService.Status",
                type: "uint8",
              },
            ],
          },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "open",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      {
        name: "agreement",
        internalType: "struct IService.Agreement",
        type: "tuple",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
      },
    ],
    name: "quote",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "users", internalType: "address[]", type: "address[]" }],
    name: "removeFromWhitelist",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardTracker",
    outputs: [
      { name: "", internalType: "contract IRewardTracker", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "riskSpreads",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "router",
    outputs: [
      { name: "", internalType: "contract IRewardRouter", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "routerV2",
    outputs: [
      { name: "", internalType: "contract IRewardRouterV2", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_guardian", internalType: "address", type: "address" }],
    name: "setGuardian",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "margin", internalType: "uint256", type: "uint256" },
    ],
    name: "setMinMargin",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "riskSpread", internalType: "uint256", type: "uint256" },
      { name: "baseRisk", internalType: "uint256", type: "uint256" },
    ],
    name: "setRiskParams",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_locked", internalType: "bool", type: "bool" }],
    name: "toggleLock",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "toggleWhitelistFlag",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "index", internalType: "uint256", type: "uint256" }],
    name: "tokenByIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "usdgVault",
    outputs: [
      { name: "", internalType: "contract IUsdgVault", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "whitelisted",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

/**
 *
 */
export const gmxAddress = {
  98745: "0x1d85b8A4C82c9d711Ade3D484c3C5715C3f22beA",
} as const;

/**
 *
 */
export const gmxConfig = { address: gmxAddress, abi: gmxABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__.
 *
 *
 */
export function useGmxRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"agreements"`.
 *
 *
 */
export function useGmxAgreements<
  TFunctionName extends "agreements",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "agreements",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useGmxBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"baseRisks"`.
 *
 *
 */
export function useGmxBaseRisks<
  TFunctionName extends "baseRisks",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "baseRisks",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"computeDueFees"`.
 *
 *
 */
export function useGmxComputeDueFees<
  TFunctionName extends "computeDueFees",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "computeDueFees",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"deadline"`.
 *
 *
 */
export function useGmxDeadline<
  TFunctionName extends "deadline",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "deadline",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"enabled"`.
 *
 *
 */
export function useGmxEnabled<
  TFunctionName extends "enabled",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "enabled",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"getAgreement"`.
 *
 *
 */
export function useGmxGetAgreement<
  TFunctionName extends "getAgreement",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "getAgreement",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useGmxGetApproved<
  TFunctionName extends "getApproved",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "getApproved",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"getUserAgreements"`.
 *
 *
 */
export function useGmxGetUserAgreements<
  TFunctionName extends "getUserAgreements",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "getUserAgreements",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"glp"`.
 *
 *
 */
export function useGmxGlp<
  TFunctionName extends "glp",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "glp",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"glpManager"`.
 *
 *
 */
export function useGmxGlpManager<
  TFunctionName extends "glpManager",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "glpManager",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"guardian"`.
 *
 *
 */
export function useGmxGuardian<
  TFunctionName extends "guardian",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "guardian",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"id"`.
 *
 *
 */
export function useGmxId<
  TFunctionName extends "id",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "id",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useGmxIsApprovedForAll<
  TFunctionName extends "isApprovedForAll",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"liquidationScore"`.
 *
 *
 */
export function useGmxLiquidationScore<
  TFunctionName extends "liquidationScore",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "liquidationScore",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"locked"`.
 *
 *
 */
export function useGmxLocked<
  TFunctionName extends "locked",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "locked",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"manager"`.
 *
 *
 */
export function useGmxManager<
  TFunctionName extends "manager",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "manager",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"minMargin"`.
 *
 *
 */
export function useGmxMinMargin<
  TFunctionName extends "minMargin",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "minMargin",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useGmxName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useGmxOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useGmxOwnerOf<
  TFunctionName extends "ownerOf",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "ownerOf",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"quote"`.
 *
 *
 */
export function useGmxQuote<
  TFunctionName extends "quote",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "quote",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"rewardTracker"`.
 *
 *
 */
export function useGmxRewardTracker<
  TFunctionName extends "rewardTracker",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "rewardTracker",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"riskSpreads"`.
 *
 *
 */
export function useGmxRiskSpreads<
  TFunctionName extends "riskSpreads",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "riskSpreads",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"router"`.
 *
 *
 */
export function useGmxRouter<
  TFunctionName extends "router",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "router",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"routerV2"`.
 *
 *
 */
export function useGmxRouterV2<
  TFunctionName extends "routerV2",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "routerV2",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useGmxSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useGmxSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 *
 */
export function useGmxTokenByIndex<
  TFunctionName extends "tokenByIndex",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "tokenByIndex",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 *
 */
export function useGmxTokenOfOwnerByIndex<
  TFunctionName extends "tokenOfOwnerByIndex",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "tokenOfOwnerByIndex",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useGmxTokenUri<
  TFunctionName extends "tokenURI",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "tokenURI",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useGmxTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"usdgVault"`.
 *
 *
 */
export function useGmxUsdgVault<
  TFunctionName extends "usdgVault",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "usdgVault",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"weth"`.
 *
 *
 */
export function useGmxWeth<
  TFunctionName extends "weth",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "weth",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"whitelisted"`.
 *
 *
 */
export function useGmxWhitelisted<
  TFunctionName extends "whitelisted",
  TSelectData = ReadContractResult<typeof gmxABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractRead({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "whitelisted",
    ...config,
  } as UseContractReadConfig<typeof gmxABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__.
 *
 *
 */
export function usePrepareGmxWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"addToWhitelist"`.
 *
 *
 */
export function usePrepareGmxAddToWhitelist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "addToWhitelist">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "addToWhitelist",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "addToWhitelist">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareGmxApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "approve">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"close"`.
 *
 *
 */
export function usePrepareGmxClose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "close">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "close",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "close">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"edit"`.
 *
 *
 */
export function usePrepareGmxEdit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "edit">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "edit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "edit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"open"`.
 *
 *
 */
export function usePrepareGmxOpen(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "open">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "open",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "open">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"removeFromWhitelist"`.
 *
 *
 */
export function usePrepareGmxRemoveFromWhitelist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "removeFromWhitelist">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "removeFromWhitelist",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "removeFromWhitelist">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareGmxRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "renounceOwnership">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareGmxSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "safeTransferFrom">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "safeTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareGmxSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "setApprovalForAll">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"setGuardian"`.
 *
 *
 */
export function usePrepareGmxSetGuardian(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "setGuardian">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "setGuardian",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "setGuardian">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"setMinMargin"`.
 *
 *
 */
export function usePrepareGmxSetMinMargin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "setMinMargin">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "setMinMargin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "setMinMargin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"setRiskParams"`.
 *
 *
 */
export function usePrepareGmxSetRiskParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "setRiskParams">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "setRiskParams",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "setRiskParams">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"toggleLock"`.
 *
 *
 */
export function usePrepareGmxToggleLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "toggleLock">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "toggleLock",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "toggleLock">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"toggleWhitelistFlag"`.
 *
 *
 */
export function usePrepareGmxToggleWhitelistFlag(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "toggleWhitelistFlag">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "toggleWhitelistFlag",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "toggleWhitelistFlag">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareGmxTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gmxABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareGmxTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gmxABI, "transferOwnership">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: gmxABI,
    address: gmxAddress[98745],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof gmxABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__.
 *
 *
 */
export function useGmxEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    ...config,
  } as UseContractEventConfig<typeof gmxABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useGmxApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "Approval">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useGmxApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "ApprovalForAll">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"BaseRiskSpreadWasUpdated"`.
 *
 *
 */
export function useGmxBaseRiskSpreadWasUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "BaseRiskSpreadWasUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "BaseRiskSpreadWasUpdated",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "BaseRiskSpreadWasUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"GuardianWasUpdated"`.
 *
 *
 */
export function useGmxGuardianWasUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "GuardianWasUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "GuardianWasUpdated",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "GuardianWasUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"LiquidationTriggered"`.
 *
 *
 */
export function useGmxLiquidationTriggeredEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "LiquidationTriggered">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "LiquidationTriggered",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "LiquidationTriggered">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"LockWasToggled"`.
 *
 *
 */
export function useGmxLockWasToggledEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "LockWasToggled">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "LockWasToggled",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "LockWasToggled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useGmxOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "OwnershipTransferred">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"PositionClosed"`.
 *
 *
 */
export function useGmxPositionClosedEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "PositionClosed">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "PositionClosed",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "PositionClosed">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"PositionOpened"`.
 *
 *
 */
export function useGmxPositionOpenedEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "PositionOpened">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "PositionOpened",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "PositionOpened">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useGmxTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "Transfer">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "Transfer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"WhitelistAccessFlagWasToggled"`.
 *
 *
 */
export function useGmxWhitelistAccessFlagWasToggledEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "WhitelistAccessFlagWasToggled">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "WhitelistAccessFlagWasToggled",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "WhitelistAccessFlagWasToggled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gmxABI}__ and `eventName` set to `"WhitelistedStatusWasChanged"`.
 *
 *
 */
export function useGmxWhitelistedStatusWasChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof gmxABI, "WhitelistedStatusWasChanged">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof gmxAddress } = {} as any
) {
  return useContractEvent({
    abi: gmxABI,
    address: gmxAddress[98745],
    eventName: "WhitelistedStatusWasChanged",
    ...config,
  } as UseContractEventConfig<typeof gmxABI, "WhitelistedStatusWasChanged">);
}
