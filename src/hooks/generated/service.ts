// Generated by @wagmi/cli@1.2.0 on 6/24/2023 at 9:19:46 PM
import {
  UseContractEventConfig,
  UseContractReadConfig,
  UsePrepareContractWriteConfig,
  useContractEvent,
  useContractRead,
  usePrepareContractWrite,
} from "wagmi";
import { ReadContractResult } from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Service
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export const serviceABI = [
  { type: "error", inputs: [], name: "InvalidStatus" },
  { type: "error", inputs: [], name: "Locked" },
  { type: "error", inputs: [], name: "RestrictedAccess" },
  { type: "error", inputs: [], name: "RestrictedToOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "approved",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "asset",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "newValue",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "BaseRiskSpreadWasUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newGuardian",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "GuardianWasUpdated",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "status", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LockWasToggled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "agreements",
    outputs: [
      { name: "createdAt", internalType: "uint256", type: "uint256" },
      { name: "status", internalType: "enum IService.Status", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "close",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "deadline",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenID", internalType: "uint256", type: "uint256" },
      {
        name: "agreement",
        internalType: "struct IService.Agreement",
        type: "tuple",
        components: [
          {
            name: "loans",
            internalType: "struct IService.Loan[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" },
              { name: "margin", internalType: "uint256", type: "uint256" },
              {
                name: "interestAndSpread",
                internalType: "uint256",
                type: "uint256",
              },
            ],
          },
          {
            name: "collaterals",
            internalType: "struct IService.Collateral[]",
            type: "tuple[]",
            components: [
              {
                name: "itemType",
                internalType: "enum IService.ItemType",
                type: "uint8",
              },
              { name: "token", internalType: "address", type: "address" },
              { name: "identifier", internalType: "uint256", type: "uint256" },
              { name: "amount", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "createdAt", internalType: "uint256", type: "uint256" },
          {
            name: "status",
            internalType: "enum IService.Status",
            type: "uint8",
          },
        ],
      },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "edit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "exposures",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenID", internalType: "uint256", type: "uint256" }],
    name: "getAgreement",
    outputs: [
      {
        name: "",
        internalType: "struct IService.Loan[]",
        type: "tuple[]",
        components: [
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "margin", internalType: "uint256", type: "uint256" },
          {
            name: "interestAndSpread",
            internalType: "uint256",
            type: "uint256",
          },
        ],
      },
      {
        name: "",
        internalType: "struct IService.Collateral[]",
        type: "tuple[]",
        components: [
          {
            name: "itemType",
            internalType: "enum IService.ItemType",
            type: "uint8",
          },
          { name: "token", internalType: "address", type: "address" },
          { name: "identifier", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
        ],
      },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "enum IService.Status", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getApproved",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "guardian",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "id",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "locked",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "manager",
    outputs: [{ name: "", internalType: "contract IManager", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "order",
        internalType: "struct IService.Order",
        type: "tuple",
        components: [
          {
            name: "agreement",
            internalType: "struct IService.Agreement",
            type: "tuple",
            components: [
              {
                name: "loans",
                internalType: "struct IService.Loan[]",
                type: "tuple[]",
                components: [
                  { name: "token", internalType: "address", type: "address" },
                  { name: "amount", internalType: "uint256", type: "uint256" },
                  { name: "margin", internalType: "uint256", type: "uint256" },
                  {
                    name: "interestAndSpread",
                    internalType: "uint256",
                    type: "uint256",
                  },
                ],
              },
              {
                name: "collaterals",
                internalType: "struct IService.Collateral[]",
                type: "tuple[]",
                components: [
                  {
                    name: "itemType",
                    internalType: "enum IService.ItemType",
                    type: "uint8",
                  },
                  { name: "token", internalType: "address", type: "address" },
                  {
                    name: "identifier",
                    internalType: "uint256",
                    type: "uint256",
                  },
                  { name: "amount", internalType: "uint256", type: "uint256" },
                ],
              },
              { name: "createdAt", internalType: "uint256", type: "uint256" },
              {
                name: "status",
                internalType: "enum IService.Status",
                type: "uint8",
              },
            ],
          },
          { name: "data", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "open",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ownerOf",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_guardian", internalType: "address", type: "address" }],
    name: "setGuardian",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_locked", internalType: "bool", type: "bool" }],
    name: "toggleLock",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "index", internalType: "uint256", type: "uint256" }],
    name: "tokenByIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export const serviceAddress = {
  42161: "0xBf35a6ec119710ADE3403202eDBF003a2b852AEc",
} as const;

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export const serviceConfig = {
  address: serviceAddress,
  abi: serviceABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"agreements"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceAgreements<
  TFunctionName extends "agreements",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "agreements",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"deadline"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceDeadline<
  TFunctionName extends "deadline",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "deadline",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"exposures"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceExposures<
  TFunctionName extends "exposures",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "exposures",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"getAgreement"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceGetAgreement<
  TFunctionName extends "getAgreement",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "getAgreement",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"getApproved"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceGetApproved<
  TFunctionName extends "getApproved",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "getApproved",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"guardian"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceGuardian<
  TFunctionName extends "guardian",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "guardian",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"id"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceId<
  TFunctionName extends "id",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "id",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceIsApprovedForAll<
  TFunctionName extends "isApprovedForAll",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"locked"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceLocked<
  TFunctionName extends "locked",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "locked",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"manager"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceManager<
  TFunctionName extends "manager",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "manager",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"ownerOf"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceOwnerOf<
  TFunctionName extends "ownerOf",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "ownerOf",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceTokenByIndex<
  TFunctionName extends "tokenByIndex",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "tokenByIndex",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceTokenOfOwnerByIndex<
  TFunctionName extends "tokenOfOwnerByIndex",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "tokenOfOwnerByIndex",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"tokenURI"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceTokenUri<
  TFunctionName extends "tokenURI",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "tokenURI",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof serviceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractRead({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof serviceABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "approve">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"close"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceClose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "close">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "close",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "close">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"edit"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceEdit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "edit">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "edit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "edit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"open"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceOpen(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "open">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "open",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "open">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "renounceOwnership">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "safeTransferFrom">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "safeTransferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "setApprovalForAll">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "setApprovalForAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"setGuardian"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceSetGuardian(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "setGuardian">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "setGuardian",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "setGuardian">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"toggleLock"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceToggleLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "toggleLock">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "toggleLock",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "toggleLock">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link serviceABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function usePrepareServiceTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof serviceABI, "transferOwnership">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return usePrepareContractWrite({
    abi: serviceABI,
    address: serviceAddress[42161],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof serviceABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    ...config,
  } as UseContractEventConfig<typeof serviceABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "Approval">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "ApprovalForAll">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"BaseRiskSpreadWasUpdated"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceBaseRiskSpreadWasUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "BaseRiskSpreadWasUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "BaseRiskSpreadWasUpdated",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "BaseRiskSpreadWasUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"GuardianWasUpdated"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceGuardianWasUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "GuardianWasUpdated">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "GuardianWasUpdated",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "GuardianWasUpdated">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"LockWasToggled"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceLockWasToggledEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "LockWasToggled">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "LockWasToggled",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "LockWasToggled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "OwnershipTransferred">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link serviceABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xBf35a6ec119710ADE3403202eDBF003a2b852AEc)
 */
export function useServiceTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof serviceABI, "Transfer">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof serviceAddress } = {} as any
) {
  return useContractEvent({
    abi: serviceABI,
    address: serviceAddress[42161],
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof serviceABI, "Transfer">);
}
